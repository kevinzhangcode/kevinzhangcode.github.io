[{"categories":["documentation"],"content":"本教程是Markdown公式指导手册","date":"2022-03-01","objectID":"/markdownguidbook/","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"本教程是Markdown公式指导手册，转载文章。 ","date":"2022-03-01","objectID":"/markdownguidbook/:0:0","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"一、公式使用参考 ","date":"2022-03-01","objectID":"/markdownguidbook/:1:0","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"1．如何插入公式 $\\LaTeX$ 的数学公式有两种：行中公式和独立公式。行中公式放在文中与其它文字混编，独立公式单独成行。 行中公式可以用如下方法表示： $ 数学公式 $ 独立公式可以用如下方法表示： $$ 数学公式 $$ 自动编号的公式可以用如下方法表示： 若需要手动编号，参见“大括号和行标的使用”。 \\begin{equation} 数学公式 \\label{eq:当前公式名} \\end{equation} 自动编号后的公式可在全文任意处使用 \\eqref{eq:公式名} 语句引用。 例子： $ J_\\alpha(x) = \\sum_{m=0}^\\infty \\frac{(-1)^m}{m! \\Gamma (m + \\alpha + 1)} {\\left({ \\frac{x}{2} }\\right)}^{2m + \\alpha} \\text {，行内公式示例} $ 显示：$ J_\\alpha(x) = \\sum_{m=0}^\\infty \\frac{(-1)^m}{m! \\Gamma (m + \\alpha + 1)} {\\left({ \\frac{x}{2} }\\right)}^{2m + \\alpha} \\text {，行内公式示例} $ 例子： $$ J_\\alpha(x) = \\sum_{m=0}^\\infty \\frac{(-1)^m}{m! \\Gamma (m + \\alpha + 1)} {\\left({ \\frac{x}{2} }\\right)}^{2m + \\alpha} \\text {，独立公式示例} $$ 显示：$$ J_\\alpha(x) = \\sum_{m=0}^\\infty \\frac{(-1)^m}{m! \\Gamma (m + \\alpha + 1)} {\\left({ \\frac{x}{2} }\\right)}^{2m + \\alpha} \\text {，独立公式示例} $$ 例子： $$ 在公式 \\eqref{eq:sample} 中，我们看到了这个被自动编号的公式。$$ \\begin{equation} E=mc^2 \\text{，自动编号公式示例} \\label{eq:sample} \\end{equation} 显示： $$ 在公式 \\eqref{eq:sample} 中，我们看到了这个被自动编号的公式。$$ $$ \\begin{equation} E=mc^2 \\text{，自动编号公式示例} \\label{eq:sample} \\end{equation} $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:1:1","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"2．如何输入上下标 ^ 表示上标, _ 表示下标。如果上下标的内容多于一个字符，需要用 {} 将这些内容括成一个整体。上下标可以嵌套，也可以同时使用。 例子： $$ x^{y^z}=(1+{\\rm e}^x)^{-2xy^w} $$ 显示：$$ x^{y^z}=(1+{\\rm e}^x)^{-2xy^w} $$ 另外，如果要在左右两边都有上下标，可以使用 \\sideset 命令；也可以简单地在符号前面多打一个上下标，此时会以行内公式渲染。 例子： $$ \\sideset{^1_2}{^3_4}\\bigotimes \\quad or \\quad {^1_2}\\bigotimes {^3_4} $$ 显示：$$\\sideset{^1_2}{^3_4}\\bigotimes \\quad or \\quad {^1_2}\\bigotimes {^3_4} $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:1:2","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"3．如何输入括号和分隔符 ()、[] 和 | 表示符号本身，使用 \\{\\} 来表示 {} 。当要显示大号的括号或分隔符时，要用 \\left 和 \\right 命令。 一些特殊的括号： 输入 显示 输入 显示 \\langle $\\langle$ \\rangle $\\rangle$ \\lceil $\\lceil$ \\rceil $\\rceil$ \\lfloor $\\lfloor$ \\rfloor $\\rfloor$ \\lbrace $\\lbrace$ \\rbrace $\\rbrace$ \\lvert $\\lvert$ \\rvert $\\rvert$ \\lVert $\\lVert$ \\rVert $\\rVert$ @lymd 有时，我们需要在行内使用两个竖杠表示向量间的某种空间距离，可以这样写 \\lVert \\boldsymbol{X}_i - \\boldsymbol{S}_j \\rVert^2 → $\\lVert \\boldsymbol{X}_i - \\boldsymbol{S}_j \\rVert^2$ 例子： $$ f(x,y,z) = 3y^2z \\left( 3+\\frac{7x+5}{1+y^2} \\right) $$ 显示：$$ f(x,y,z) = 3y^2z \\left( 3+\\frac{7x+5}{1+y^2} \\right) $$ 有时要用 \\left. 或 \\right. 进行匹配而不显示本身。 例子： $$ \\left. \\frac{{\\rm d}u}{{\\rm d}x} \\right| _{x=0} $$ 显示：$$ \\left. \\frac{{\\rm d}u}{{\\rm d}x} \\right| _{x=0} $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:1:3","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"4．如何输入分数 通常使用 \\frac {分子} {分母} 来生成一个分数，分数可多层嵌套。如果分式较为复杂，亦可使用 分子 \\over 分母 此时分数仅有一层。 例子： $$ \\frac{a-1}{b-1} \\quad or \\quad {a+1 \\over b+1} $$ 显示：$$ \\frac{a-1}{b-1} \\quad or \\quad {a+1 \\over b+1} $$ 当分式 仅有两个字符时 可直接输入 \\frac ab 来快速生成一个 $\\large\\frac ab$ 。 例子： $$ \\frac 12,\\frac 1a,\\frac a2 \\quad \\mid \\quad \\text{2 letters only:} \\quad \\frac 12a \\,, k\\frac q{r^2} $$ 显示：$$ \\frac 12,\\frac 1a,\\frac a2 \\quad \\mid \\quad \\text{2 letters only:} \\quad \\frac 12a ,, k\\frac q{r^2} $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:1:4","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"5．如何输入开方 使用 \\sqrt [根指数，省略时为2] {被开方数} 命令输入开方。 例子： $$ \\sqrt{2} \\quad or \\quad \\sqrt[n]{3} $$ 显示：$$ \\sqrt{2} \\quad or \\quad \\sqrt[n]{3} $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:1:5","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"6．如何输入省略号 数学公式中常见的省略号有两种，\\ldots 表示与 文本底线 对齐的省略号，\\cdots 表示与 文本中线 对齐的省略号。 例子： $$ f(x_1,x_2,\\underbrace{\\ldots}_{\\rm ldots} ,x_n) = x_1^2 + x_2^2 + \\underbrace{\\cdots}_{\\rm cdots} + x_n^2 $$ 显示：$$ f(x_1,x_2,\\underbrace{\\ldots}{\\rm ldots} ,x_n) = x_1^2 + x_2^2 + \\underbrace{\\cdots}{\\rm cdots} + x_n^2 $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:1:6","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"7．如何输入向量 使用 \\vec{向量} 来自动产生一个向量。也可以使用 \\overrightarrow 等命令自定义字母上方的符号。 例子： $$ \\vec{a} \\cdot \\vec{b}=0 $$ 显示：$$ \\vec{a} \\cdot \\vec{b}=0 $$ 例子： $$ xy \\text{ with arrows:} \\quad \\overleftarrow{xy} \\; \\mid \\; \\overleftrightarrow{xy} \\; \\mid \\; \\overrightarrow{xy} $$ 显示：$$ xy \\text{ with arrows:} \\quad \\overleftarrow{xy} ; \\mid ; \\overleftrightarrow{xy} ; \\mid ; \\overrightarrow{xy} $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:1:7","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"8．如何输入积分 使用 \\int_积分下限^积分上限 {被积表达式} 来输入一个积分。 例子： $$ \\int_0^1 {x^2} \\,{\\rm d}x $$ 显示：$$ \\int_0^1 {x^2} ,{\\rm d}x $$ 本例中 \\, 和 {\\rm d} 部分可省略，但加入能使式子更美观，详见“在字符间加入空格”及“如何进行字体转换”。 ","date":"2022-03-01","objectID":"/markdownguidbook/:1:8","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"9．如何输入极限运算 使用 \\lim_{变量 \\to 表达式} 表达式 来输入一个极限。如有需求，可以更改 \\to 符号至任意符号。 例子： $$ \\lim_{n \\to \\infty} \\frac{1}{n(n+1)} \\quad and \\quad \\lim_{x\\leftarrow{示例}} \\frac{1}{n(n+1)} $$ 显示：$$ \\lim_{n \\to \\infty} \\frac{1}{n(n+1)} \\quad and \\quad \\lim_{x\\leftarrow{示例}} \\frac{1}{n(n+1)} $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:1:9","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"10．如何输入累加、累乘运算 使用 \\sum_{下标表达式}^{上标表达式} {累加表达式} 来输入一个累加。与之类似，使用 \\prod \\bigcup \\bigcap 来分别输入累乘、并集和交集，更多符号可参考“其它特殊字符”。 此类符号在行内显示时上下标表达式将会移至右上角和右下角，如 $\\sum_{i=1}^n \\frac{1}{i^2}$。 例子： $$ \\sum_{i=1}^n \\frac{1}{i^2} \\quad and \\quad \\prod_{i=1}^n \\frac{1}{i^2} \\quad and \\quad \\bigcup_{i=1}^{2} \\Bbb{R} $$ 显示：$$ \\sum_{i=1}^n \\frac{1}{i^2} \\quad and \\quad \\prod_{i=1}^n \\frac{1}{i^2} \\quad and \\quad \\bigcup_{i=1}^{2} \\Bbb{R} $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:1:10","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"11．如何输入希腊字母 输入 \\小写希腊字母英文全称 和 \\首字母大写希腊字母英文全称 来分别输入小写和大写希腊字母。 对于大写希腊字母与现有字母相同的，直接输入大写字母即可。 输入 显示 输入 显示 输入 显示 输入 显示 \\alpha $\\alpha$ A $A$ \\beta $\\beta$ B $B$ \\gamma $\\gamma$ \\Gamma $\\Gamma$ \\delta $\\delta$ \\Delta $\\Delta$ \\epsilon $\\epsilon$ E $E$ \\zeta $\\zeta$ Z $Z$ \\eta $\\eta$ H $H$ \\theta $\\theta$ \\Theta $\\Theta$ \\iota $\\iota$ I $I$ \\kappa $\\kappa$ K $K$ \\lambda $\\lambda$ \\Lambda $\\Lambda$ \\mu $\\mu$ M $M$ \\nu $\\nu$ N $N$ \\xi $\\xi$ \\Xi $\\Xi$ o $o$ O $O$ \\pi $\\pi$ \\Pi $\\Pi$ \\rho $\\rho$ P $P$ \\sigma $\\sigma$ \\Sigma $\\Sigma$ \\tau $\\tau$ T $T$ \\upsilon $\\upsilon$ \\Upsilon $\\Upsilon$ \\phi $\\phi$ \\Phi $\\Phi$ \\chi $\\chi$ X $X$ \\psi $\\psi$ \\Psi $\\Psi$ \\omega $\\omega$ \\Omega $\\Omega$ 部分字母有变量专用形式，以 \\var- 开头。 小写形式 大写形式 变量形式 显示 \\epsilon E \\varepsilon $\\epsilon \\mid E \\mid \\varepsilon$ \\theta \\Theta \\vartheta $\\theta \\mid \\Theta \\mid \\vartheta$ \\rho P \\varrho $\\rho \\mid P \\mid \\varrho$ \\sigma \\Sigma \\varsigma $\\sigma \\mid \\Sigma \\mid \\varsigma$ \\phi \\Phi \\varphi $\\phi \\mid \\Phi \\mid \\varphi$ ","date":"2022-03-01","objectID":"/markdownguidbook/:1:11","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"12．如何输入其它特殊字符 **完整的 $\\LaTeX$ 可用符号列表可以在 这份文档 中查阅（极长，共 348 页），大部分常用符号可以参阅 这份精简版文档 查询。**需要注意的是，$\\LaTeX$ 符号并不保证在 MathJax v2.2 中可用，即在 Cmd Markdown 编辑阅读器中可能并不支持所输入的特定命令。 若需要显示更大或更小的字符，在符号前插入 \\large 或 \\small 命令。 MathJax 针对任意元素均提供从小至大 \\tiny \\Tiny \\scriptsize \\small *默认值 \\normalsize \\large \\Large \\LARGE \\huge \\Huge 共十种渲染大小，详见官方文档。 若找不到需要的符号，推荐使用 $\\large\\rm{Detexify}$ 来画出想要的符号 (1)．关系运算符 输入 显示 输入 显示 输入 显示 输入 显示 \\pm $\\pm$ \\times $\\times$ \\div $\\div$ \\mid $\\mid$ \\nmid $\\nmid$ \\cdot $\\cdot$ \\circ $\\circ$ \\ast $\\ast$ \\bigodot $\\bigodot$ \\bigotimes $\\bigotimes$ \\bigoplus $\\bigoplus$ \\leq $\\leq$ \\geq $\\geq$ \\neq $\\neq$ \\approx $\\approx$ \\equiv $\\equiv$ \\sum $\\sum$ \\prod $\\prod$ \\coprod $\\coprod$ \\backslash $\\backslash$ (2)．集合运算符 输入 显示 输入 显示 输入 显示 \\emptyset $\\emptyset$ \\in $\\in$ \\notin $\\notin$ \\subset $\\subset$ \\supset $\\supset$ \\subseteq $\\subseteq$ \\supseteq $\\supseteq$ \\cap $\\cap$ \\cup $\\cup$ \\vee $\\vee$ \\wedge $\\wedge$ \\uplus $\\uplus$ \\top $\\top$ \\bot $\\bot$ \\complement $\\complement$ (3)．对数运算符 输入 显示 输入 显示 输入 显示 \\log $\\log$ \\lg $\\lg$ \\ln $\\ln$ (4)．三角运算符 输入 显示 输入 显示 输入 显示 \\backsim $\\backsim$ \\cong $\\cong$ \\angle A $\\angle A$ \\sin $\\sin$ \\cos $\\cos$ \\tan $\\tan$ \\csc $\\csc$ \\sec $\\sec$ \\cot $\\cot$ (5)．微积分运算符 输入 显示 输入 显示 输入 显示 \\int $\\int$ \\iint $\\iint$ \\iiint $\\iiint$ \\partial $\\partial$ \\oint $\\oint$ \\prime $\\prime$ \\lim $\\lim$ \\infty $\\infty$ \\nabla $\\nabla$ (6)．逻辑运算符 输入 显示 输入 显示 输入 显示 \\because $\\because$ \\therefore $\\therefore$ \\neg $\\neg$ \\forall $\\forall$ \\exists $\\exists$ \\not\\subset $\\not\\subset$ \\not\u003c $\\not\u003c$ \\not\u003e $\\not\u003e$ \\not= $\\not=$ (7)．戴帽符号 输入 显示 输入 显示 输入 显示 \\hat{xy} $\\hat{xy}$ \\widehat{xyz} $\\widehat{xyz}$ \\bar{y} $\\bar{y}$ \\tilde{xy} $\\tilde{xy}$ \\widetilde{xyz} $\\widetilde{xyz}$ \\acute{y} $\\acute{y}$ \\breve{y} $\\breve{y}$ \\check{y} $\\check{y}$ \\grave{y} $\\grave{y}$ \\dot{x} $\\dot{x}$ \\ddot{x} $\\ddot{x}$ \\dddot{x} $\\dddot{x}$ 若需要在特定文字顶部\\底部放置内容，可使用 \\overset{顶部内容}{正常内容} 和 \\underset{底部内容}{正常内容} 命令。 例子： $$ \\verb+\\overset{above}{level}+ \\qquad \\overset{xx}{ABC} \\;\\; \\mid \\quad \\overset{x^2}{\\longmapsto}\\ \\, \\mid \\quad \\overset{\\bullet\\circ\\circ\\bullet}{T} $$ 显示： $$ \\verb+\\overset{above}{level}+ \\qquad \\overset{xx}{ABC} ;; \\mid \\quad \\overset{x^2}{\\longmapsto}\\ , \\mid \\quad \\overset{\\bullet\\circ\\circ\\bullet}{T} $$ 例子： $$ \\verb+\\underset{below}{level}+ \\qquad \\underset{xx}{ABC} \\;\\; \\mid \\quad \\underset{x^2}{\\longmapsto}\\ \\, \\mid \\quad \\underset{\\bullet\\circ\\circ\\bullet}{T} $$ 显示： $$ \\verb+\\underset{below}{level}+ \\qquad \\underset{xx}{ABC} ;; \\mid \\quad \\underset{x^2}{\\longmapsto}\\ , \\mid \\quad \\underset{\\bullet\\circ\\circ\\bullet}{T} $$ 此命令可叠加嵌套使用，生成类似化学反应式的多重条件符号， 如 \\overset{H_2}{\\underset{1300℃}{\\Longleftrightarrow}}： $$ \\rm{SrO+V^{’’}{Sr} \\overset{H_2}{\\underset{1300℃}{\\Longleftrightarrow}} Sr^{\\times}{Sr}+2e^{’}+\\frac 12O_2(g)} $$ 和 \\overset{Surface/bulk}{\\underset{diffusion}{\\longleftrightarrow}}： $$ \\rm{2OH^{\\bullet}{O(STN)}+2O^{\\times}{O(YSZ)} ; \\overset{Surface/bulk}{\\underset{diffusion}{\\longleftrightarrow}} ;; 2OH^{\\bullet}{O(YSZ)}+2O^{\\times}{O(STN)}} $$ 一般建议在书写化学方程式时声明 \\require{AMDcd} 语句，使用 MathJax 内置的交换图表功能，具体例子可参见下文。 (8)．连线符号 其它可用的文字修饰符可参见官方文档 “Additional decorations”。 输入 显示 \\fbox{a+b+c+d} 高级框选需声明 enclose 标签 $\\fbox{a+b+c+d}$ \\overleftarrow{a+b+c+d} $\\overleftarrow{a+b+c+d}$ \\overrightarrow{a+b+c+d} $\\overrightarrow{a+b+c+d}$ \\overleftrightarrow{a+b+c+d} $\\overleftrightarrow{a+b+c+d}$ \\underleftarrow{a+b+c+d} $\\underleftarrow{a+b+c+d}$ \\underrightarrow{a+b+c+d} $\\underrightarrow{a+b+c+d}$ \\underleftrightarrow{a+b+c+d} $\\underleftrightarrow{a+b+c+d}$ \\overline{a+b+c+d} $\\overline{a+b+c+d}$ \\underline{a+b+c+d} $\\underline{a+b+c+d}$ \\overbrace{a+b+c+d}^{Sample} $\\overbrace{a+b+c+d}^{Sample}$ \\underbrace{a+b+c+d}_{Sample} $\\underbrace{a+b+c+d}_{Sample}$ \\overbrace{a+\\underbrace{b+c}_{1.0}+d}^{2.0} $\\overbrace{a+\\underbrace{b+c}_{1.0}+d}^{2.0}$ \\underbrace{a\\cdot a\\cdots a}_{b\\text{ times}} $\\underbrace{a\\cdot a\\cdots a}_{b\\text{ times}}$ (9)．箭头符号 推荐使用符号： 输入 显示 输入 显示 输入 显示 \\to $\\to$ \\mapsto $\\mapsto$ \\underrightarrow{1℃/min} $\\und","date":"2022-03-01","objectID":"/markdownguidbook/:1:12","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"13．如何进行字体转换 若要对公式的某一部分字符进行字体转换，可以用 {\\字体 {需转换的部分字符}} 命令，其中 \\字体 部分可以参照下表选择合适的字体。一般情况下，公式默认为斜体字 $italic$ 。 示例中 全部大写 的字体仅大写可用。 输入 全字母可用 显示 输入 仅大写可用 显示 \\rm 罗马体 $\\rm{Sample}$ \\mathcal 花体（数学符号等） $\\mathcal{SAMPLE}$ \\it 斜体 $\\it{Sample}$ \\mathbb 黑板粗体（定义域等） $\\mathbb{SAMPLE}$ \\bf 粗体 $\\bf{Sample}$ \\mit 数学斜体 $\\mit{SAMPLE}$ \\sf 等线体 $\\sf{Sample}$ \\scr 手写体 $\\scr{SAMPLE}$ \\tt 打字机体 $\\tt{Sample}$ \\frak 旧德式字体 $\\frak{Sample}$ @lymd \\boldsymbol{\\alpha} 用来表示向量或者矩阵的加粗斜体，如向量 $\\boldsymbol{\\vec\\alpha}$。 转换字体十分常用，例如在积分中： 例子： \\begin{array}{cc} \\mathrm{Bad} \u0026 \\mathrm{Better} \\\\ \\hline \\\\ \\int_0^1 x^2 dx \u0026 \\int_0^1 x^2 \\,{\\rm d}x \\end{array} 显示： \\begin{array}{cc} \\mathrm{Bad} \u0026 \\mathrm{Better} \\ \\hline \\ \\int_0^1 x^2 dx \u0026 \\int_0^1 x^2 ,{\\rm d}x \\end{array} 注意比较两个式子间 $dx$ 与 ${\\rm d} x$ 的不同。 使用 \\operatorname 命令也可以达到相同的效果，详见“定义新的运算符”。 ","date":"2022-03-01","objectID":"/markdownguidbook/:1:13","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"14．如何高亮一行公式 使用 \\bbox[底色, (可选)边距, (可选)边框 border: 框宽度 框类型 框颜色] 命令来高亮一行公式。 底色和框颜色支持详见“更改文字颜色”，边距及框宽度支持 绝对像素 px 或 相对大小 em，框类型支持 实线 solid 或 虚线 dashed。 例子： $$ \\bbox[yellow]{ e^x=\\lim_{n\\to\\infty} \\left( 1+\\frac{x}{n} \\right)^n \\qquad (1) } $$ 显示： $$ \\bbox[yellow]{ e^x=\\lim_{n\\to\\infty} \\left( 1+\\frac{x}{n} \\right)^n \\qquad (1) } $$ 例子： $$ \\bbox[#9ff, 5px]{ % 此处向外添加 5 像素的边距 e^x=\\lim_{n\\to\\infty} \\left( 1+\\frac{x}{n} \\right)^n \\qquad (1) } $$ 显示： $$ \\bbox[#9ff, 5px]{ e^x=\\lim_{n\\to\\infty} \\left( 1+\\frac{x}{n} \\right)^n \\qquad (1) } $$ 例子： $$ % 此处使用 0.5 倍行高作为边距，附加 2 像素的实线边框（Ctrl+Alt+Y 可见） \\bbox[#2f3542, 0.5em, border:2px solid #f1f2f6]{ \\color{#f1f2f6}{e^x=\\lim_{n\\to\\infty} \\left( 1+\\frac{x}{n} \\right)^n \\qquad (1)} } $$ 显示： $$ \\bbox[#2f3542, 0.5em, border:2px solid #f1f2f6]{ \\color{#f1f2f6}{e^x=\\lim_{n\\to\\infty} \\left( 1+\\frac{x}{n} \\right)^n \\qquad (1)} } $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:1:14","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"15．大括号和行标的使用 在 \\left 和 \\right 之后加上要使用的括号来创建自动匹配高度的圆括号 ( )，方括号 [ ] 和花括号 \\{ \\}。 在每个公式末尾前使用 \\tag {行标} 来实现行标。 例子： $$ f\\left( \\left[ \\frac{ 1+\\left\\{x,y\\right\\} }{ \\left( \\frac xy + \\frac yx \\right) (u+1) }+a \\right]^{3/2} \\right) \\tag {行标} $$ 显示： $$ f\\left( \\left[ \\frac{ 1+\\left{x,y\\right} }{ \\left( \\frac xy + \\frac yx \\right) (u+1) }+a \\right]^{3/2} \\right) \\tag {行标} $$ 如果你需要在不同的行显示对应括号，可以在每一行对应处使用 \\left. 或 \\right. 来放一个“不存在的括号”。 例子： $$ \\begin{align*} a=\u0026\\left(1+2+3+ \\cdots \\right. \\\\ \u0026\\cdots+\\left. \\infty-2+\\infty-1+\\infty\\right) \\end{align*} $$ 显示： $$ \\begin{align*} a=\u0026\\left(1+2+3+ \\cdots \\right. \\ \u0026\\cdots+\\left. \\infty-2+\\infty-1+\\infty\\right) \\end{align*} $$ 如果你需要将大括号里面显示的分隔符也变大，可以使用 \\middle 命令，此处分别使用单竖线 | 和双竖线 \\\\| 。 例子： $$ \\left\\langle q \\; \\middle| \\frac{\\frac xy}{\\frac uv} \\middle\\| p \\right\\rangle $$ 显示： $$ \\left\\langle q ; \\middle| \\frac{\\frac xy}{\\frac uv} \\middle| p \\right\\rangle $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:1:15","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"16．其它命令 (1)．定义新的运算符 \\operatorname 当需要使用的运算符不在 MathJax 的内置库中时，程序可能会报错或产生错误的渲染结果。此时可以使用 \\operatorname 命令定义一个新的运算符号。 反例： \\begin{array}{c|c} \\mathrm{Error} \u0026 \\text{Wrong rendering} \\\\ \\hline \\\\ \\arsinh(x) \u0026 arsinh(x) \\\\ \\Res_{z=1} \u0026 Res_{z=1}{\\frac{1}{z^2-z}=1} \\\\ \\end{array} 显示： \\begin{array}{c|c} \\mathrm{Error} \u0026 \\text{Wrong rendering} \\ \\hline \\ \\arsinh(x) \u0026 arsinh(x) \\ \\Res_{z=1} \u0026 Res_{z=1}{\\frac{1}{z^2-z}=1} \\ \\end{array} 使用 \\operatorname{运算符}{式子} 来生成一个普通运算，或使用 \\operatorname*{运算符}_{下标}^{上标}{式子} 来生成一个含上下标的自定义运算。 例子： \\begin{array}{c|c} \\text{Normal Operator} \u0026 \\text{Operator with label above and below} \\\\ \\hline \\\\ \\scriptsize\\text{\\operatorname{arsinh}{x}} \u0026 \\scriptsize\\text{\\operatorname*{Res}_{z=1}{\\frac{1}{z^2-z}=1}} \\\\ \\operatorname{arsinh}{x} \u0026 \\operatorname*{Res}_{z=1}{\\frac{1}{z^2-z}=1} \\\\ \\end{array} 显示： \\begin{array}{c|c} \\text{Normal Operator} \u0026 \\text{Operator with label above and below} \\ \\scriptsize\\text{\\operatorname{arsinh}{x}} \u0026 \\scriptsize\\text{\\operatorname*{Res}{z=1}{\\frac{1}{z^2-z}=1}} \\[2ex] \\hline \\ \\operatorname{arsinh}{x} \u0026 \\operatorname*{Res}{z=1}{\\frac{1}{z^2-z}=1} \\end{array} 查询关于此命令的定义和关于此命令的讨论来进一步了解此命令。 (2)．添加注释文字 \\text 在 \\text {文字} 中仍可以使用 $公式$ 插入其它公式。 例子： $$ f(n)= \\begin{cases} n/2, \u0026 \\text {if $n$ is even} \\\\ 3n+1, \u0026 \\text{if $n$ is odd} \\end{cases} $$ 显示： $$ f(n)= \\begin{cases} n/2, \u0026 \\text {if $n$ is even} \\ 3n+1, \u0026 \\text{if $n$ is odd} \\end{cases} $$ (3)．在字符间加入空格 有四种宽度的空格可以使用： \\,、\\;、\\quad 和 \\qquad，灵活使用 \\text{n个空格} 也可以在任意位置实现空格。 同时存在一种负空格 \\! 用来减小字符间距，一般在物理单位中使用。 反复使用 \\! 命令能够实现不同元素的叠加渲染，如$\\wedge!!!!!!!!;\\bigcirc$ 和 $ }!!!!!\\div $ 例子： \\begin{array}{c|c} \\text{Spaces} \u0026 \\text{Negative Space in Units} \\\\ \\hline \\\\ \\overbrace{a \\! b}^{\\text{\\!}} \\mid \\underbrace{ab}_{\\rm{default}} \\mid \\overbrace{a \\, b}^{\\text{\\,}} \\mid \\underbrace{a \\; b}_{\\text{\\;}} \\mid \\overbrace{a \\quad b}^{\\text{\\quad}} \\mid \\underbrace{a \\qquad b}_{\\text{\\qquad}} \u0026 \\mathrm{N}\\!\\cdot\\!\\mathrm{m} \\mid \\mathrm{s}\\!\\cdot\\!\\mathrm{A} \\mid \\mathrm{kg}\\!\\cdot\\!\\mathrm{m}^2 \\\\ \\end{array} 显示： \\begin{array}{c|c} \\text{Spaces} \u0026 \\text{Negative Space in Units} \\ \\hline \\ \\overbrace{a ! b}^{\\text{!}} \\mid \\underbrace{ab}{\\rm{default}} \\mid \\overbrace{a , b}^{\\text{,}} \\mid \\underbrace{a ; b}{\\text{;}} \\mid \\overbrace{a \\quad b}^{\\text{\\quad}} \\mid \\underbrace{a \\qquad b}_{\\text{\\qquad}} \u0026 \\mathrm{N}!\\cdot!\\mathrm{m} \\mid \\mathrm{s}!\\cdot!\\mathrm{A} \\mid \\mathrm{kg}!\\cdot!\\mathrm{m}^2 \\ \\end{array} 一些常见的公式单位可表达如下： 例子： $$ \\mu_0=4\\pi\\times10^{-7} \\ \\left.\\mathrm{\\mathrm{T}\\!\\cdot\\!\\mathrm{m}}\\middle/\\mathrm{A}\\right. $$ $$ 180^\\circ=\\pi \\ \\mathrm{rad} $$ $$ \\mathrm{N_A} = 6.022\\times10^{23} \\ \\mathrm{mol}^{-1} $$ 显示： $$ \\mu_0=4\\pi\\times10^{-7} \\ \\left.\\mathrm{\\mathrm{T}!\\cdot!\\mathrm{m}}\\middle/\\mathrm{A}\\right. $$ $$ 180^\\circ=\\pi \\ \\mathrm{rad} $$ $$ \\mathrm{N_A} = 6.022\\times10^{23} \\ \\mathrm{mol}^{-1} $$ (4)．更改文字颜色 \\color 使用 \\color{颜色}{文字} 来更改特定的文字颜色。 更改文字颜色需要浏览器支持 ，如果浏览器不知道你所需的颜色，那么文字将被渲染为黑色。对于较旧的浏览器（HTML4 \u0026 CSS2），以下颜色是被支持的： 输入 显示 输入 显示 black $\\color{black}{text}$ grey $\\color{grey}{text}$ silver $\\color{silver}{text}$ white $\\color{white}{text}$ maroon $\\color{maroon}{text}$ red $\\color{red}{text}$ yellow $\\color{yellow}{text}$ lime $\\color{lime}{text}$ olive $\\color{olive}{text}$ green $\\color{green}{text}$ teal $\\color{teal}{text}$ auqa $\\color{auqa}{text}$ blue $\\color{blue}{text}$ navy $\\color{navy}{text}$ purple $\\color{purple}{text}$ fuchsia $\\color{fuchsia}{text}$ 对于较新的浏览器（HTML5 \u0026 CSS3），HEX 颜色将被支持： 输入 \\color {#rgb} {text} 来自定义更多的颜色，其中 #rgb 或 #rrggbb 的 r g b 可输入 0-9 和 a-f 来表示红色、绿色和蓝色的纯度（饱和度）。 例子： \\begin{array}{|rrrrrrrr|}\\hline \\verb+#000+ \u0026 \\color{#000}{text} \u0026 \u0026 \u0026 \\verb+#00F+ \u0026 \\color{#00F}{text} \u0026 \u0026 \\\\ \u0026 \u0026 \\verb+#0F0+ \u0026 \\color{#0F0}{text} \u0026 \u0026 \u0026 \\verb+#0FF+ \u0026 \\color{#0FF}{text} \\\\ \\verb+#F00+ \u0026 \\color{#F00}{text} \u0026 \u0026 \u0026 \\verb+#F0F+ \u0026 \\color{#F0F}{text} \u0026 \u0026 \\\\ \u0026 \u0026 \\verb+#FF0+ \u0026 \\color{#FF0}{text} \u0026 \u0026 \u0026 \\verb+#FFF+ \u0026 \\color{#FFF}{text} \\\\ \\hline\\end{array} 显示： \\begin{array}{|rrrrrrrr|}\\hline \\verb+#000+ \u0026 \\color{#000}{text} \u0026 \u0026 ","date":"2022-03-01","objectID":"/markdownguidbook/:1:16","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"二、矩阵使用参考 ","date":"2022-03-01","objectID":"/markdownguidbook/:2:0","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"1．如何输入无框矩阵 在开头使用 \\begin{matrix}，在结尾使用 \\end{matrix}，在中间插入矩阵元素，每个元素之间插入 \u0026 ，并在每行结尾处使用 \\\\ 。 使用矩阵时必须声明 $ 或 $$ 符号。 例子： $$ \\begin{matrix} 1 \u0026 x \u0026 x^2 \\\\ 1 \u0026 y \u0026 y^2 \\\\ 1 \u0026 z \u0026 z^2 \\\\ \\end{matrix} $$ 显示： $$ \\begin{matrix} 1 \u0026 x \u0026 x^2 \\ 1 \u0026 y \u0026 y^2 \\ 1 \u0026 z \u0026 z^2 \\ \\end{matrix} $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:2:1","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"2．如何输入边框矩阵 在开头将 matrix 替换为 pmatrix bmatrix Bmatrix vmatrix Vmatrix 。 例子： $ \\begin{matrix} 1 \u0026 2 \\\\ 3 \u0026 4 \\\\ \\end{matrix} $ $ \\begin{pmatrix} 1 \u0026 2 \\\\ 3 \u0026 4 \\\\ \\end{pmatrix} $ $ \\begin{bmatrix} 1 \u0026 2 \\\\ 3 \u0026 4 \\\\ \\end{bmatrix} $ $ \\begin{Bmatrix} 1 \u0026 2 \\\\ 3 \u0026 4 \\\\ \\end{Bmatrix} $ $ \\begin{vmatrix} 1 \u0026 2 \\\\ 3 \u0026 4 \\\\ \\end{vmatrix} $ $ \\begin{Vmatrix} 1 \u0026 2 \\\\ 3 \u0026 4 \\\\ \\end{Vmatrix} $ 显示： matrix pmatrix bmatrix Bmatrix vmatrix Vmatrix $ \\begin{matrix} 1 \u0026 2 \\ 3 \u0026 4 \\ \\end{matrix} $ $ \\begin{pmatrix} 1 \u0026 2 \\ 3 \u0026 4 \\ \\end{pmatrix} $ $ \\begin{bmatrix} 1 \u0026 2 \\ 3 \u0026 4 \\ \\end{bmatrix} $ $ \\begin{Bmatrix} 1 \u0026 2 \\ 3 \u0026 4 \\ \\end{Bmatrix} $ $ \\begin{vmatrix} 1 \u0026 2 \\ 3 \u0026 4 \\ \\end{vmatrix} $ $ \\begin{Vmatrix} 1 \u0026 2 \\ 3 \u0026 4 \\ \\end{Vmatrix} $ ","date":"2022-03-01","objectID":"/markdownguidbook/:2:2","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"3．如何输入带省略符号的矩阵 使用 \\cdots $\\cdots$ , \\ddots $\\ddots$ , \\vdots $\\vdots$ 来输入省略符号。 例子： $$ \\begin{pmatrix} 1 \u0026 a_1 \u0026 a_1^2 \u0026 \\cdots \u0026 a_1^n \\\\ 1 \u0026 a_2 \u0026 a_2^2 \u0026 \\cdots \u0026 a_2^n \\\\ \\vdots \u0026 \\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ 1 \u0026 a_m \u0026 a_m^2 \u0026 \\cdots \u0026 a_m^n \\\\ \\end{pmatrix} $$ 显示： $$ \\begin{pmatrix} 1 \u0026 a_1 \u0026 a_1^2 \u0026 \\cdots \u0026 a_1^n \\ 1 \u0026 a_2 \u0026 a_2^2 \u0026 \\cdots \u0026 a_2^n \\ \\vdots \u0026 \\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\vdots \\ 1 \u0026 a_m \u0026 a_m^2 \u0026 \\cdots \u0026 a_m^n \\ \\end{pmatrix} $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:2:3","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"4．如何输入带分割符号的矩阵 详见\"数组使用参考\"。 例子： $$ \\left[ \\begin{array}{cc|c} 1 \u0026 2 \u0026 3 \\\\ 4 \u0026 5 \u0026 6 \\\\ \\end{array} \\right] $$ 显示： $$ \\left[ \\begin{array}{cc|c} 1 \u0026 2 \u0026 3 \\ 4 \u0026 5 \u0026 6 \\ \\end{array} \\right] $$ 其中 cc|c 代表在一个三列矩阵中的第二和第三列之间插入分割线。 ","date":"2022-03-01","objectID":"/markdownguidbook/:2:4","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"5．如何输入行中矩阵 若想在一行内显示矩阵， 使用\\bigl(\\begin{smallmatrix} ... \\end{smallmatrix}\\bigr)。 例子： 这是一个行中矩阵的示例 $\\bigl(\\begin{smallmatrix} a \u0026 b \\\\ c \u0026 d \\end{smallmatrix}\\bigr)$ 。 显示：这是一个行中矩阵的示例 $\\bigl(\\begin{smallmatrix} a \u0026 b \\ c \u0026 d \\end{smallmatrix}\\bigr)$ 。 ","date":"2022-03-01","objectID":"/markdownguidbook/:2:5","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"三、方程式序列使用参考 ","date":"2022-03-01","objectID":"/markdownguidbook/:3:0","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"1．如何输入一个方程式序列 人们经常想要一列整齐且居中的方程式序列。使用 \\begin{align}…\\end{align} 来创造一列方程式，其中在每行结尾处使用 \\\\ 。使用方程式序列无需声明公式符号 $ 或 $$ 。 请注意 {align} 语句是自动编号的，使用 {align*} 声明不自动编号。 例子： \\begin{align} \\sqrt{37} \u0026 = \\sqrt{\\frac{73^2-1}{12^2}} \\\\ \u0026 = \\sqrt{\\frac{73^2}{12^2}\\cdot\\frac{73^2-1}{73^2}} \\\\ \u0026 = \\sqrt{\\frac{73^2}{12^2}}\\sqrt{\\frac{73^2-1}{73^2}} \\\\ \u0026 = \\frac{73}{12}\\sqrt{1-\\frac{1}{73^2}} \\\\ \u0026 \\approx \\frac{73}{12}\\left(1-\\frac{1}{2\\cdot73^2}\\right) \\\\ \\end{align} 显示： \\begin{align} \\sqrt{37} \u0026 = \\sqrt{\\frac{73^2-1}{12^2}} \\ \u0026 = \\sqrt{\\frac{73^2}{12^2}\\cdot\\frac{73^2-1}{73^2}} \\ \u0026 = \\sqrt{\\frac{73^2}{12^2}}\\sqrt{\\frac{73^2-1}{73^2}} \\ \u0026 = \\frac{73}{12}\\sqrt{1-\\frac{1}{73^2}} \\ \u0026 \\approx \\frac{73}{12}\\left(1-\\frac{1}{2\\cdot73^2}\\right) \\ \\end{align} 本例中每行公式的编号续自“如何插入公式”中的自动编号公式\\eqref{eq:sample} 。 ","date":"2022-03-01","objectID":"/markdownguidbook/:3:1","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"2．在一个方程式序列的每一行中注明原因 在 {align} 中后添加 \u0026 符号来自动对齐后面的内容，可灵活组合 \\text 和 \\tag 语句。\\tag 语句编号优先级高于自动编号。 例子： \\begin{align} v + w \u0026 = 0 \u0026 \\text{Given} \\tag 1 \\\\ -w \u0026 = -w + 0 \u0026 \\text{additive identity} \\tag 2 \\\\ -w + 0 \u0026 = -w + (v + w) \u0026 \\text{equations $(1)$ and $(2)$} \\\\ \\end{align} 显示： \\begin{align} v + w \u0026 = 0 \u0026 \\text{Given} \\tag 1 \\ -w \u0026 = -w + 0 \u0026 \\text{additive identity} \\tag 2 \\ -w + 0 \u0026 = -w + (v + w) \u0026 \\text{equations $(1)$ and $(2)$} \\ \\end{align} 本例中第一、第二行的自动编号被 \\tag 语句覆盖，第三行的编号为自动编号。 @joyphys 如何引用 \\tag 标记的公式？ 使用 \\tag{yourtag} 来标记公式，然后在 \\tag 之后加上 \\label{yourlabel} ","date":"2022-03-01","objectID":"/markdownguidbook/:3:2","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"四、条件表达式使用参考 ","date":"2022-03-01","objectID":"/markdownguidbook/:4:0","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"1．如何输入一个条件表达式 使用 \\begin{cases}…\\end{cases} 来创造一组条件表达式，在每一行条件中插入 \u0026 来指定需要对齐的内容，并在每一行结尾处使用 \\\\。 例子： $$ f(n) = \\begin{cases} n/2, \u0026 \\text{if $n$ is even} \\\\ 3n+1, \u0026 \\text{if $n$ is odd} \\\\ \\end{cases} $$ 显示： $$ f(n) = \\begin{cases} n/2, \u0026 \\text{if $n$ is even} \\ 3n+1, \u0026 \\text{if $n$ is odd} \\ \\end{cases} $$ @Sherlockk 用 markdown+math 编辑时 \\text 内需用 \\(equation\\) ","date":"2022-03-01","objectID":"/markdownguidbook/:4:1","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"2．如何输入一个左侧对齐的条件表达式 若想让文字在左侧对齐显示，则有如下方式： 例子： $$ \\left. \\begin{array}{l} \\text{if $n$ is even:} \u0026 n/2 \\\\ \\text{if $n$ is odd:} \u0026 3n+1 \\\\ \\end{array} \\right\\} =f(n) $$ 显示： $$ \\left. \\begin{array}{l} \\text{if $n$ is even:} \u0026 n/2 \\ \\text{if $n$ is odd:} \u0026 3n+1 \\ \\end{array} \\right} =f(n) $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:4:2","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"3．如何使条件表达式适配行高 在一些情况下，条件表达式中某些行的行高为非标准高度，此时使用 \\\\[2ex] 语句代替该行末尾的 \\\\ 来让编辑器适配。 例子： 不适配[2ex] $$ f(n) = \\begin{cases} \\frac{n}{2}, \u0026 \\text{if $n$ is even} \\\\ 3n+1, \u0026 \\text{if $n$ is odd} \\\\ \\end{cases} $$ 适配[2ex] $$ f(n) = \\begin{cases} \\frac{n}{2}, \u0026 \\text{if $n$ is even} \\\\[2ex] 3n+1, \u0026 \\text{if $n$ is odd} \\\\ \\end{cases} $$ 显示： 不适配[2ex] 适配[2ex] $$ f(n) = \\begin{cases} \\frac{n}{2}, \u0026 \\text{if $n$ is even} \\ 3n+1, \u0026 \\text{if $n$ is odd} \\ \\end{cases} $$ $$ f(n) = \\begin{cases} \\frac{n}{2}, \u0026 \\text{if $n$ is even} \\[2ex] 3n+1, \u0026 \\text{if $n$ is odd} \\ \\end{cases} $$ 一个 [ex] 指一个 “X-Height”，即 x 字母高度。可以根据情况指定多个 [ex]，如 [3ex]、[4ex] 等。 其实可以在任意换行处使用 \\\\[2ex] 语句，只要你觉得合适。 ","date":"2022-03-01","objectID":"/markdownguidbook/:4:3","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"五、数组与表格使用参考 ","date":"2022-03-01","objectID":"/markdownguidbook/:5:0","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"1．如何输入一个数组或表格 通常，一个格式化后的表格比单纯的文字或排版后的文字更具有可读性。 数组和表格均以 \\begin{array} 开头，并在其后定义列数及每一列的文本对齐属性，c l r 分别代表居中、左对齐及右对齐。若需要插入垂直分割线，在定义式中插入 | ，若要插入水平分割线，在下一行输入前插入 \\hline 。 与矩阵相似，每行元素间均须要插入 \u0026 ，每行元素以 \\\\ 结尾，最后以 \\ end{array} 结束数组。 使用单个数组或表格时无需声明 $ 或 $$ 符号。 例子： \\begin{array}{c|lcr} n \u0026 \\text{左对齐} \u0026 \\text{居中对齐} \u0026 \\text{右对齐} \\\\ \\hline 1 \u0026 0.24 \u0026 1 \u0026 125 \\\\ 2 \u0026 -1 \u0026 189 \u0026 -8 \\\\ 3 \u0026 -20 \u0026 2000 \u0026 1+10i \\\\ \\end{array} 显示： \\begin{array}{c|lcr} n \u0026 \\text{左对齐} \u0026 \\text{居中对齐} \u0026 \\text{右对齐} \\ \\hline 1 \u0026 0.24 \u0026 1 \u0026 125 \\ 2 \u0026 -1 \u0026 189 \u0026 -8 \\ 3 \u0026 -20 \u0026 2000 \u0026 1+10i \\ \\end{array} ","date":"2022-03-01","objectID":"/markdownguidbook/:5:1","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"2．如何输入一个嵌套的数组或表格 多个数组\\表格可 互相嵌套 并组成一组数组或表格。 使用嵌套前必须声明 $$ 符号。 例子： $$ \\begin{array}{c} % 总表格 \\begin{array}{cc} % 第一行内分成两列 \\begin{array}{c|cccc} % 第一列\"最小值\"数组 \\text{min} \u0026 0 \u0026 1 \u0026 2 \u0026 3 \\\\ \\hline 0 \u0026 0 \u0026 0 \u0026 0 \u0026 0 \\\\ 1 \u0026 0 \u0026 1 \u0026 1 \u0026 1 \\\\ 2 \u0026 0 \u0026 1 \u0026 2 \u0026 2 \\\\ 3 \u0026 0 \u0026 1 \u0026 2 \u0026 3 \\\\ \\end{array} \u0026 \\begin{array}{c|cccc} % 第二列\"最大值\"数组 \\text{max} \u0026 0 \u0026 1 \u0026 2 \u0026 3 \\\\ \\hline 0 \u0026 0 \u0026 1 \u0026 2 \u0026 3 \\\\ 1 \u0026 1 \u0026 1 \u0026 2 \u0026 3 \\\\ 2 \u0026 2 \u0026 2 \u0026 2 \u0026 3 \\\\ 3 \u0026 3 \u0026 3 \u0026 3 \u0026 3 \\\\ \\end{array} \\end{array} % 第一行表格组结束 \\\\ \\begin{array}{c|cccc} % 第二行 Delta 值数组 \\Delta \u0026 0 \u0026 1 \u0026 2 \u0026 3 \\\\ \\hline 0 \u0026 0 \u0026 1 \u0026 2 \u0026 3 \\\\ 1 \u0026 1 \u0026 0 \u0026 1 \u0026 2 \\\\ 2 \u0026 2 \u0026 1 \u0026 0 \u0026 1 \\\\ 3 \u0026 3 \u0026 2 \u0026 1 \u0026 0 \\\\ \\end{array} % 第二行表格结束 \\end{array} % 总表格结束 $$ 显示： $$ \\begin{array}{c} % 总表格 \\begin{array}{cc} % 第一行内分成两列 \\begin{array}{c|cccc} % 第一列\"最小值\"数组 \\text{min} \u0026 0 \u0026 1 \u0026 2 \u0026 3 \\ \\hline 0 \u0026 0 \u0026 0 \u0026 0 \u0026 0 \\ 1 \u0026 0 \u0026 1 \u0026 1 \u0026 1 \\ 2 \u0026 0 \u0026 1 \u0026 2 \u0026 2 \\ 3 \u0026 0 \u0026 1 \u0026 2 \u0026 3 \\ \\end{array} \u0026 \\begin{array}{c|cccc} % 第二列\"最大值\"数组 \\text{max} \u0026 0 \u0026 1 \u0026 2 \u0026 3 \\ \\hline 0 \u0026 0 \u0026 1 \u0026 2 \u0026 3 \\ 1 \u0026 1 \u0026 1 \u0026 2 \u0026 3 \\ 2 \u0026 2 \u0026 2 \u0026 2 \u0026 3 \\ 3 \u0026 3 \u0026 3 \u0026 3 \u0026 3 \\ \\end{array} \\end{array} % 第一行表格组结束 \\ \\begin{array}{c|cccc} % 第二行 Delta 值数组 \\Delta \u0026 0 \u0026 1 \u0026 2 \u0026 3 \\ \\hline 0 \u0026 0 \u0026 1 \u0026 2 \u0026 3 \\ 1 \u0026 1 \u0026 0 \u0026 1 \u0026 2 \\ 2 \u0026 2 \u0026 1 \u0026 0 \u0026 1 \\ 3 \u0026 3 \u0026 2 \u0026 1 \u0026 0 \\ \\end{array} % 第二行表格结束 \\end{array} % 总表格结束 $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:5:2","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"3．如何输入一个方程组 可以使用 \\begin{array} … \\end{array} 和 \\left\\{ … \\right. 来创建一个方程组： 例子： $$ \\left\\{ \\begin{array}{c} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3 \\\\ \\end{array} \\right. $$ 显示： $$ \\left{ \\begin{array}{c} a_1x+b_1y+c_1z=d_1 \\ a_2x+b_2y+c_2z=d_2 \\ a_3x+b_3y+c_3z=d_3 \\ \\end{array} \\right. $$ 或使用条件表达式组 \\begin{cases} … \\end{cases} 来实现相同效果： 例子： \\begin{cases} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3 \\\\ \\end{cases} 显示： \\begin{cases} a_1x+b_1y+c_1z=d_1 \\ a_2x+b_2y+c_2z=d_2 \\ a_3x+b_3y+c_3z=d_3 \\ \\end{cases} ","date":"2022-03-01","objectID":"/markdownguidbook/:5:3","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"六、连分数使用参考 ","date":"2022-03-01","objectID":"/markdownguidbook/:6:0","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"1．如何输入一个连分式 就像输入分式时使用 \\frac 一样，使用 \\cfrac 来创建一个连分数。 例子： $$ x = a_0 + \\cfrac{1^2}{a_1 + \\cfrac{2^2}{a_2 + \\cfrac{3^2}{a_3 + \\cfrac{4^4}{a_4 + \\cdots } } } } $$ 显示： $$ x = a_0 + \\cfrac{1^2}{a_1 + \\cfrac{2^2}{a_2 + \\cfrac{3^2}{a_3 + \\cfrac{4^4}{a_4 + \\cdots } } } } $$ 不要使用普通的 \\frac 或 \\over 来生成连分数，这样会看起来很恶心。 反例： $$ x = a_0 + \\frac{1^2}{a_1 + \\frac{2^2}{a_2 + \\frac{3^2}{a_3 + \\frac{4^4}{a_4 + \\cdots } } } } $$ 显示： $$ x = a_0 + \\frac{1^2}{a_1 + \\frac{2^2}{a_2 + \\frac{3^2}{a_3 + \\frac{4^4}{a_4 + \\cdots } } } } $$ 当然，你可以使用 \\frac 来表达连分数的紧缩记法。 例子： $$ x = a_0 + \\frac{1^2}{a_1 +} \\frac{2^2}{a_2 +} \\frac{3^2}{a_3 +} \\frac{4^4}{a_4 +} \\cdots $$ 显示： $$ x = a_0 + \\frac{1^2}{a_1 +} \\frac{2^2}{a_2 +} \\frac{3^2}{a_3 +} \\frac{4^4}{a_4 +} \\cdots $$ 连分数通常都太大以至于不易排版，所以建议在连分数前后声明 $$ 符号，或使用像 [a0,a1,a2,a3,…] 一样的紧缩记法。 ","date":"2022-03-01","objectID":"/markdownguidbook/:6:1","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"七、交换图表使用参考 ","date":"2022-03-01","objectID":"/markdownguidbook/:7:0","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"1．如何输入一个交换图表 推荐使用 Cmd Markdown 自带的各种图功能，详见 Cmd Markdown 高阶语法手册。 使用一行 \\require{AMScd} 语句来允许交换图表的显示。 声明交换图表后，语法与矩阵相似，在开头使用 \\begin{CD}，在结尾使用 \\ end{CD}，在中间插入图表元素，每个元素之间插入 \u0026 ，并在每行结尾处使用 \\\\。 例子： $$ \\require{AMScd} \\begin{CD} A @\u003ea\u003e\u003e B \\\\ @V b V V\\# @VV c V \\\\ C @\u003e\u003ed\u003e D \\\\ \\end{CD} $$ 显示： $$ \\require{AMScd} \\begin{CD} A @\u003ea» B \\ @V b V V# @VV c V \\ C @»d\u003e D \\ \\end{CD} $$ 其中，@\u003e\u003e\u003e 代表右箭头、@\u003c\u003c\u003c 代表左箭头、@VVV 代表下箭头、@AAA 代表上箭头、@= 代表水平双实线、@| 代表竖直双实线、@.代表没有箭头。 在 @\u003e\u003e\u003e 的 \u003e\u003e\u003e 之间任意插入文字即代表该箭头的注释文字。 例子： $$ \\require{AMDcd} \\begin{CD} A @\u003e\u003e\u003e B @\u003e{\\text{very long label}}\u003e\u003e C \\\\ @. @AAA @| \\\\ D @= E @\u003c\u003c\u003c F \\\\ \\end{CD} $$ 显示： $$ \\require{AMDcd} \\begin{CD} A @»\u003e B @\u003e{\\text{very long label}}» C \\ @. @AAA @| \\ D @= E @«\u003c F \\ \\end{CD} $$ 在本例中，very long label 自动延长了它所在箭头以及对应箭头的长度，因而交换图表十分适合进行化学反应式的书写。 例子： $$ \\require{AMDcd} \\begin{CD} \\rm{RCOHR^{'}SO_3Na} @\u003e{\\large\\text{Hydrolysis, $\\Delta$, Dil.HCl}}\u003e\u003e \\rm{(RCOR^{'})+NaCl+SO_2+ H_2O} \\end{CD} $$ 显示： $$ \\require{AMDcd} \\begin{CD} \\rm{RCOHR^{’}SO_3Na} @\u003e{\\large\\text{Hydrolysis, $\\Delta$, Dil.HCl}}» \\rm{(RCOR^{’})+NaCl+SO_2+ H_2O} \\end{CD} $$ ","date":"2022-03-01","objectID":"/markdownguidbook/:7:1","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":["documentation"],"content":"八、一些特殊的注意事项 !! 本段内容为个人翻译，可能有不准确之处 !! These are issues that won’t affect the correctness of formulas, but might make them look significantly better or worse. Beginners should feel free to ignore this advice; someone else will correct it for them, or more likely nobody will care. 现在指出的小问题并不会影响公式的正确显示，但能让它们看起来明显更好看。初学者可无视这些建议，自然会有强迫症患者替你们改掉它的，或者更可能地，不会有人在意这些细节。 Don’t use \\frac in exponents or limits of integrals; it looks bad and can be confusing, which is why it is rarely done in professional mathematical typesetting. Write the fraction horizontally, with a slash: 在以 $e$ 为底的指数函数、极限和积分中尽量不要使用 \\frac 符号——它会使整段函数看起来很奇怪并可能产生歧义，因此它在专业数学排版中几乎从不出现。可试着横着写这些分式，中间使用斜线间隔 / （用斜线代替分数线）。 例子： \\begin{array}{cc} \\mathrm{Bad} \u0026 \\mathrm{Better} \\\\ \\hline \\\\ \\large e^{i\\frac{\\pi}2} \\quad e^{\\frac{i\\pi}2}\u0026 \\large e^{i\\pi/2} \\\\[2ex] \\int_{-\\frac\\pi2}^\\frac\\pi2 \\sin x\\,dx \u0026 \\int_{-\\pi/2}^{\\pi/2}\\sin x\\,dx \\\\ \\end{array} 显示： \\begin{array}{cc} \\mathrm{Bad} \u0026 \\mathrm{Better} \\ \\hline \\ \\large e^{i\\frac{\\pi}2} \\quad e^{\\frac{i\\pi}2}\u0026 \\large e^{i\\pi/2} \\[2ex] \\int_{-\\frac\\pi2}^\\frac\\pi2 \\sin x,dx \u0026 \\int_{-\\pi/2}^{\\pi/2}\\sin x,dx \\ \\end{array} The | symbol has the wrong spacing when it is used as a divider, for example in set comprehensions. Use \\mid instead: 使用 | 符号作为分隔符时会产生错误的间距，因此在需要分隔时最好使用 \\mid 来代替它。 例子: \\begin{array}{cc} \\mathrm{Bad} \u0026 \\mathrm{Better} \\\\ \\hline \\\\ \\{x|x^2\\in\\Bbb Z\\} \u0026 \\{x\\mid x^2\\in\\Bbb Z\\} \\\\ \\end{array} 显示： \\begin{array}{cc} \\mathrm{Bad} \u0026 \\mathrm{Better} \\ \\hline \\ {x|x^2\\in\\Bbb Z} \u0026 {x\\mid x^2\\in\\Bbb Z} \\ \\end{array} For double and triple integrals, don’t use \\int\\int or \\int\\int\\int. Instead use the special forms \\iint and \\iiint: 使用多重积分符号时，不要多次使用 \\int 来声明，直接使用 \\iint 来表示二重积分，使用 \\iiint 来表示三重积分。 个人补充：在表示面积分和体积分时下标建议使用 \\boldsymbol{S} 和 \\boldsymbol{V} 符号；对于多维函数的超体积，可使用 \\idotsint，如下面的例子所示。 例子： \\begin{array}{cc} \\mathrm{Bad} \u0026 \\mathrm{Better} \\\\ \\hline \\\\ \\int\\int_S f(x)\\,dy\\,dx \u0026 \\iint_{\\boldsymbol{S}} f(x)\\,{\\rm d}y\\,{\\rm d}x \\\\ \\int\\int\\int_V f(x)\\,dz\\,dy\\,dx \u0026 \\iiint_{\\boldsymbol{V}} f(x)\\,{\\rm d}z\\,{\\rm d}y\\,{\\rm d}x \\\\[3ex] \\hline \\\\ \\text{多重积分示例} \u0026 \\idotsint_{\\boldsymbol{D}} f(x_1,x_2,\\,\\cdots\\, ,x_n)\\,{\\rm d}x_1\\cdots{\\rm d}x_n \\end{array} 显示： $$ \\require{AMSmath} \\begin{array}{cc} \\mathrm{Bad} \u0026 \\mathrm{Better} \\ \\hline \\ \\int\\int_S f(x),dy,dx \u0026 \\iint_{\\boldsymbol{S}} f(x),{\\rm d}y,{\\rm d}x \\ \\int\\int\\int_V f(x),dz,dy,dx \u0026 \\iiint_{\\boldsymbol{V}} f(x),{\\rm d}z,{\\rm d}y,{\\rm d}x \\[3ex] \\hline \\ \\text{多重积分示例} \u0026 \\idotsint_{\\boldsymbol{D}} f(x_1,x_2,,\\cdots, ,x_n),{\\rm d}x_1\\cdots{\\rm d}x_n \\end{array} $$ Use \\,, to insert a thin space before differentials; without this $\\TeX$ will mash them together: 使用多重积分时，在被积变量后加入 \\, （或在微分符号 ${\\rm d}$ 之前）来插入一个小的间距，否则各种被积变量将会挤成一团。注意比较 ${\\rm d}z{\\rm d} y{\\rm d} x$ 的不同。 例子： \\begin{array}{cc} \\mathrm{Bad} \u0026 \\mathrm{Better} \\\\ \\hline \\\\ \\iiint_V f(x){\\rm d}z {\\rm d}y {\\rm d}x \u0026 \\iiint_{\\boldsymbol{V}} f(x)\\,{\\rm d}z\\,{\\rm d}y\\,{\\rm d}x \\\\ \\end{array} 显示： \\begin{array}{cc} \\mathrm{Bad} \u0026 \\mathrm{Better} \\ \\hline \\ \\iiint_V f(x){\\rm d}z {\\rm d}y {\\rm d}x \u0026 \\iiint_{\\boldsymbol{V}} f(x),{\\rm d}z,{\\rm d}y,{\\rm d}x \\ \\end{array} 感谢您花费时间阅读这份指导手册，本手册内容可能有疏漏之处，欢迎更改指正。 更多语法请参见：Cmd Markdown 简明语法手册，Cmd Markdown 高阶语法手册。 祝您记录、阅读、分享愉快！ Drafted \u0026 Translated by Eric P. 2015-10-02 ","date":"2022-03-01","objectID":"/markdownguidbook/:8:0","tags":["Markdown"],"title":"MarkdownGuidBook","uri":"/markdownguidbook/"},{"categories":null,"content":"关于我 中国科学院大学计算机应用技术研究生一年级在读，主要研究方向是自然语言处理 ","date":"2022-02-28","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":["documentation"],"content":"本教程希望为入门数据科学、DeepLearning的同学提供Numpy的基本操作指南。","date":"2022-02-28","objectID":"/numpyguidebook/","tags":["numpy","ML"],"title":"NumpyGuidebook","uri":"/numpyguidebook/"},{"categories":["documentation"],"content":"本教程希望为入门数据科学、DeepLearning的同学提供Numpy的基本操作指南。 ","date":"2022-02-28","objectID":"/numpyguidebook/:0:0","tags":["numpy","ML"],"title":"NumpyGuidebook","uri":"/numpyguidebook/"},{"categories":["documentation"],"content":"Numpy 入门指南 ","date":"2022-02-28","objectID":"/numpyguidebook/:1:0","tags":["numpy","ML"],"title":"NumpyGuidebook","uri":"/numpyguidebook/"},{"categories":["documentation"],"content":"array基本属性 Numpy的主要对象是同构多维数组。它是一个元素表，所有类型都相同，由非负整数元组构成索引。 Numpy的数组类被调用为ndarray。存在以下属性： ndarray.ndim：数组的轴（维度）的个数。 ndarray.shape：数组的维度。一个整数元组，表示每个维度中数组的大小。对于有n行和m列的矩阵，shape将是(n,m)，即shape元组长度就是rank或者维度的个数ndim。 ndarray.size：数组元素的总数。 ndarray.dtype： 一个描述数组中元素类型的对象 。 ndarray.itemsize：数组中每个元素的字节大小。例如，元素为 float64 类型的数组的 itemsize 为8（=64/8），而 complex32 类型的数组的 itemsize 为4（=32/8）。它等于 ndarray.dtype.itemsize 。 import numpy as np #如何将列表转化为矩阵 array=np.array([[1,2,3], [2,3,4]]) print(array) #查看维度ndim print('number of dim: ',array.ndim) ##output: number of dim: 2 #查看几行几列 print('shape: ',array.shape) ##output: shape: (2, 3) #查看元素个数 print('size: ',array.size) ##output: size: 6 ","date":"2022-02-28","objectID":"/numpyguidebook/:1:1","tags":["numpy","ML"],"title":"NumpyGuidebook","uri":"/numpyguidebook/"},{"categories":["documentation"],"content":"创建数组 np.array 使用array函数从python元组中创建数组, 默认情况下，创建的数组的dtype是 float64 类型的。 import numpy as np #创建一维数组，ndim=1 a=np.array([2,23,4],dtype=np.int32) print(a) ##output:[ 2 23 4] #创建二维数组 b = np.array([(1.5,2,3), (4,5,6)]) print(b) ##output: [[ 1.5 2. 3. ] ## [ 4. 5. 6. ]] 注意：常见错误是，调用array时候传入多个数字参数，而不提供单个数字的列表类型作为参数。 \u003e\u003e\u003e a = np.array(1,2,3,4) # WRONG \u003e\u003e\u003e a = np.array([1,2,3,4]) # RIGHT np.zeros 创建一个全为0的数组 . \u003e\u003e\u003e np.zeros( (3,4) ) array([[ 0., 0., 0., 0.], [ 0., 0., 0., 0.], [ 0., 0., 0., 0.]]) np.ones 创建一个全为1的数组 . \u003e\u003e\u003e np.ones((2,3,4), dtype=np.int16) # dtype can also be specified array([[[ 1, 1, 1, 1], [ 1, 1, 1, 1], [ 1, 1, 1, 1]], [[ 1, 1, 1, 1], [ 1, 1, 1, 1], [ 1, 1, 1, 1]]], dtype=int16) np.empty 创建一个数组，其初始内容是随机的，取决于内存的状态。 \u003e\u003e\u003e np.empty( (2,3) ) # uninitialized, output may vary array([[ 3.73603959e-262, 6.02658058e-154, 6.55490914e-260], [ 5.30498948e-313, 3.14673309e-307, 1.00000000e+000]]) np.arange 该函数返回指定范围内数组而不是列表 。（注意是左包含即[start,stop) ） numpy.arange([start, ]stop, [step, ]dtype=None, *, like=None) 主要参数：start–开始；step–结束；step:步长 \u003e\u003e\u003e np.arange( 10, 30, 5 ) array([10, 15, 20, 25]) \u003e\u003e\u003e np.arange( 0, 2, 0.3 ) # it accepts float arguments array([ 0. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8]) np.linspace 当arange与浮点参数一起使用时，由于有限的浮点精度，通常不可能预测所获得的元素的数量。出于这个原因，通常最好使用linspace函数来接收我们想要的元素数量的函数，而不是步长（step） def linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None,axis=0): \u003e\u003e\u003e from numpy import pi \u003e\u003e\u003e np.linspace( 0, 2, 9 )# 9 numbers from 0 to 2 array([ 0. , 0.25, 0.5 , 0.75, 1. , 1.25, 1.5 , 1.75, 2. ]) \u003e\u003e\u003e x = np.linspace( 0, 2*pi, 100 )# useful to evaluate function at lots of points \u003e\u003e\u003e f = np.sin(x) ","date":"2022-02-28","objectID":"/numpyguidebook/:1:2","tags":["numpy","ML"],"title":"NumpyGuidebook","uri":"/numpyguidebook/"},{"categories":["documentation"],"content":"数组基本运算 加减运算 import numpy as np #加减运算 a=np.array([10,20,30,40]) b=np.arange(4) print(a,b) ##[10 20 30 40] [0 1 2 3] c=a+b d=a-b print(c,d) ##[10 21 32 43] [10 19 28 37] 点乘、叉乘 import numpy as np a=np.array([10,20,30,40]) b=np.arange(4) #叉乘 c=a*b print(\"\\n叉乘运算:\",c) ##output:叉乘运算: [ 0 20 60 120] #点乘 aa=np.array([[1,1],[0,1]]) bb=np.arange(4).reshape((2,2)) c_dot=np.dot(aa,bb) c_dot_2=aa.dot(bb) print(\"\\n点乘运算之一:\",c_dot) ##点乘运算之一: [[2 4] ## [2 3]] print(\"\\n点乘运算之二:\",c_dot_2) ##点乘运算之二: [[2 4] ## [2 3]] 乘方 使用a**b表示a的b次方 import numpy as np b=np.arange(4) #乘方运算 f=b**2 print(\"\\n乘方运算:\",f) #output:[0 1 4 9] 逻辑运算 快速查找数组中符合条件的值，涉及到\u003e、\u003c、==、\u003e=、 \u003c= 、!=，返回一个全为布尔值的数组 import numpy as np b=np.arange(4) ##output：[0 1 2 3] #快速查找符合要求的值,逻辑判断 print(b==3,'\\n') #output :[False False False True] print(b!=3,'\\n') #output：[ True True True False] 转秩 import numpy as np B=np.arange(14,2, -1).reshape((3,4)) # B :array([[14, 13, 12, 11], # [10, 9, 8, 7], # [ 6, 5, 4, 3]]) print(np.transpose(B)) #[[14 10 6] # [13 9 5] # [12 8 4] # [11 7 3]] print(B.T) #[[14 10 6] # [13 9 5] # [12 8 4] # [11 7 3]] np.sort 对矩阵中的所有值从大到小排序。 #排序函数，sort(),针对每一行进行从小到大排序操作 B=np.arange(14,2, -1).reshape((3,4)) # B :array([[14, 13, 12, 11], # [10, 9, 8, 7], # [ 6, 5, 4, 3]]) print(np.sort(B)) # B':array([[11,12,13,14], # [ 7, 8, 9,10], # [ 3, 4, 5, 6]]) np.clip clip函数，clip(Array,Array_min,Array_max)，Array指的是将要被执行用的矩阵，而后面的最小值最大值则用于让函数判断矩阵中元素是否有比最小值小的或者比最大值大的元素，并将这些指定的元素转换为最小值或者最大值。 import numpy as np A=np.arange(2,14).reshape((3,4)) print(np.clip(A,5,9)) np.argmin 查找矩阵中的最小值的索引值 np.argmax 查找矩阵中的最大值的索引值 import numpy as np A=np.arange(2,14).reshape((3,4)) #[[ 2 3 4 5] # [ 6 7 8 9] # [10 11 12 13]] #numpy基本运算 print(A) #求矩阵中最小元素 print('最小值的索引值',np.argmin(A)) ##最小值的索引值 0 #求矩阵中最大元素 print('最大值的索引值',np.argmax(A)) #最大值的索引值 11 np.mean 求矩阵所有值的均值,亦写成A.mean() 同np.average( ) np.average import numpy as np A=np.arange(2,14).reshape((3,4)) #求矩阵的均值 print('矩阵平均值表示之一',np.mean(A),'|',A.mean()) #矩阵平均值表示之一 7.5 | 7.5 print('矩阵平均值表示之二',np.average(A)) #矩阵平均值表示之二 7.5 np.cumsum import numpy as np A=np.arange(2,14).reshape((3,4)) #求矩阵n项累加 #eg: array([ [ 2, 3, 4, 5] # [ 6, 7, 8, 9] # [10,11,12,13] ]) # ---\u003e[2 5 9 14 20 27 35 44 54 65 77 90] print('矩阵前n项累加',np.cumsum(A)) np.diff import numpy as np A=np.arange(2,14).reshape((3,4)) #累差运算函数diff,计算的便是每一行中后一项与前一项之差. #eg: array([ [ 2, 3, 4, 5], array([[1,1,1], # [ 6, 7, 8, 9], ---\u003e [1,1,1], # [10,11,12,13] ]) [1,1,1]]) print(np.diff(A)) np.exp 求e的幂次方。 \u003e\u003e\u003e b=np.array([2,4,6]) \u003e\u003e\u003e np.exp(b) array([ 7.3890561 , 54.59815003, 403.42879349]) np.sqrt 开方函数 \u003e\u003e\u003e c=np.array([4,9,16]) \u003e\u003e\u003e np.sqrt(c) array([2., 3., 4.]) ","date":"2022-02-28","objectID":"/numpyguidebook/:1:3","tags":["numpy","ML"],"title":"NumpyGuidebook","uri":"/numpyguidebook/"},{"categories":["documentation"],"content":"索引、切片和迭代 一维数组 一维的数组可以进行索引、切片和迭代操作。 \u003e\u003e\u003e import numpy as np \u003e\u003e\u003e a=np.arange(10)**3 \u003e\u003e\u003e a array([ 0, 1, 8, 27, 64, 125, 216, 343, 512, 729], dtype=int32) \u003e\u003e\u003e a[2] #获取第二个值 8 \u003e\u003e\u003e a[2:5] #获取第二到第五个值，以数组形式返回 array([ 8, 27, 64], dtype=int32) \u003e\u003e\u003e a[:6:2]=-1000 #修改第零个、第二个、第六个值为-1000 \u003e\u003e\u003e a array([ -1000, 1, -1000, 27, -1000, 125, 216, 343, 512, 729], dtype=int32) \u003e\u003e\u003e a[ : :-1] #倒序a array([ 729, 512, 343, 216, 125, -1000, 27, -1000, 1, -1000], dtype=int32) \u003e\u003e\u003e for i in a: ... print(i**(1/3.)) ... nan 1.0 nan 3.0 nan 5.0 5.999999999999999 6.999999999999999 7.999999999999999 8.999999999999998 多维数组 多维数组的每一个轴都有一个索引，这些索引以逗号的形式分隔的元组给出： \u003e\u003e\u003e def f(x,y): ... return 5*x+y ... \u003e\u003e\u003e b=np.fromfunction(f,(5,4),dtype=int) \u003e\u003e\u003e b array([[ 0, 1, 2, 3], [ 5, 6, 7, 8], [10, 11, 12, 13], [15, 16, 17, 18], [20, 21, 22, 23]]) \u003e\u003e\u003e b[2,3] #第二行第三列的数字 13 \u003e\u003e\u003e b[0:5,1] #第0~5行第1列的数字，以数组形式返回 array([ 1, 6, 11, 16, 21]) \u003e\u003e\u003e b[ : ,1] #第1列的数字，以数组形式返回 array([ 1, 6, 11, 16, 21]) \u003e\u003e\u003e b[1:3,:] #第1~3行的数字，以数组形式返回 array([[ 5, 6, 7, 8], [10, 11, 12, 13]]) 对多维数组进行迭代（iterating）是相对于第一个轴完成的。 \u003e\u003e\u003e for row in b: ... print(row) ... [0 1 2 3] [5 6 7 8] [10 11 12 13] [15 16 17 18] [20 21 22 23] 迭代操作 如果想要对数组中的每个元素执行操作，可以使用flat属性，该属性是数组的所有元素的迭代器 : \u003e\u003e\u003e for element in b.flat: ... print(element) ... 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 20 21 22 23 ","date":"2022-02-28","objectID":"/numpyguidebook/:1:4","tags":["numpy","ML"],"title":"NumpyGuidebook","uri":"/numpyguidebook/"},{"categories":["documentation"],"content":"array形状操作 改变数组的形状 array.ravel() 化成1*n的矩阵。 \u003e\u003e\u003e a=np.floor(10*np.random.random((3,4))) \u003e\u003e\u003e a array([[9., 8., 7., 4.], [5., 3., 5., 9.], [9., 4., 0., 0.]]) \u003e\u003e\u003e a.shape (3, 4) \u003e\u003e\u003e a.ravel() array([9., 8., 7., 4., 5., 3., 5., 9., 9., 4., 0., 0.]) \u003e\u003e\u003e a.reshape(-1) array([9., 8., 7., 4., 5., 3., 5., 9., 9., 4., 0., 0.]) Ps: array.ravel()作用等同于array.reshape(-1) array.T 转置矩阵 。 \u003e\u003e\u003e a.T array([[9., 5., 9.], [8., 3., 4.], [7., 5., 0.], [4., 9., 0.]]) \u003e\u003e\u003e a.T.shape (4, 3) array.reshape() 改变为任意形状 。 \u003e\u003e\u003e a = np.arange(6).reshape((3, 2))#将1*6矩阵转为3*2矩阵 \u003e\u003e\u003e a array([[0, 1], [2, 3], [4, 5]]) \u003e\u003e\u003e np.reshape(a, (2, 3)) #将3*2矩阵转为2*3矩阵 array([[0, 1, 2], [3, 4, 5]]) \u003e\u003e\u003e a.reshape(2,-1) #reshape操作中将size指定为-1，则会自动计算其他的size大小： array([[0, 1, 2], [3, 4, 5]]) array.resize( ) 该方法会直接修改数组本身的shape和size。 \u003e\u003e\u003e a=np.arange(12).reshape(3,4) \u003e\u003e\u003e a array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]]) \u003e\u003e\u003e a.resize((2,6)) \u003e\u003e\u003e a array([[ 0, 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10, 11]]) 堆叠数组 np.vstack 属于一种上下合并的情况。 import numpy as np #合并Array A=np.array([1,1,1]) B=np.array([2,2,2]) #vstack:属于一种上下合并 print(np.vstack((A,B))) #Vertical stack #output: [[1 1 1] # [2 2 2]] np.hstack 属于一种左右合并的情况 import numpy as np A=np.array([1,1,1]) B=np.array([2,2,2]) D=np.hstack((A,B)) print(D) #[1 1 1 2 2 2] E=np.hstack((B,A)) print(E) #[2 2 2 1 1 1] np.concatenate #针对多个矩阵或序列进行合并操作，借助 # np.concatenate((A,A,A,...),axis=0 或 1) \u003e\u003e\u003e a = np.array([[1, 2], [3, 4]]) \u003e\u003e\u003ea \u003e\u003e\u003earray([[1, 2], [3, 4]]) \u003e\u003e\u003e b = np.array([[5, 6]]) \u003e\u003e\u003e b array([[5, 6]]) \u003e\u003e\u003e np.concatenate((a, b), axis=0)#合并列 array([[1, 2], [3, 4], [5, 6]]) \u003e\u003e\u003e np.concatenate((a, b.T), axis=1) #合并行 array([[1, 2, 5], [3, 4, 6]]) \u003e\u003e\u003e np.concatenate((a, b), axis=None) array([1, 2, 3, 4, 5, 6]) 分割数组 numpy.split import numpy as np A=np.arange(12).reshape((3,4)) print(A) #分割函数np.split(array,number of split row/column,axis= 0 or 1) print(np.split(A,2,axis=1))#把四列分成2块（2列一块） # [array([ [0, 1], # [4, 5], # [8, 9]]), array([[ 2, 3], # [ 6, 7], # [10, 11]])] #axis=0,表示按行分割；axis=1,表示按列分割 print(np.split(A,3,axis=0)) #把三行按行分成3块（一行一块） #[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8, 9, 10, 11]])] np.hsplit 按列拆开数组。 \u003e\u003e\u003e x = np.arange(16.0).reshape(4, 4) \u003e\u003e\u003e x array([[ 0., 1., 2., 3.], [ 4., 5., 6., 7.], [ 8., 9., 10., 11.], [12., 13., 14., 15.]]) \u003e\u003e\u003e np.hsplit(x, 2) [array([[ 0., 1.], [ 4., 5.], [ 8., 9.], [12., 13.]]), array([[ 2., 3.], [ 6., 7.], [10., 11.], [14., 15.]])] np.vsplit 按行拆开数组。 \u003e\u003e\u003e x = np.arange(16.0).reshape(4, 4) \u003e\u003e\u003e x array([[ 0., 1., 2., 3.], [ 4., 5., 6., 7.], [ 8., 9., 10., 11.], [12., 13., 14., 15.]]) \u003e\u003e\u003e np.vsplit(x, 2) [array([[0., 1., 2., 3.], [4., 5., 6., 7.]]), array([[ 8., 9., 10., 11.], [12., 13., 14., 15.]])] np.array_split 将一个数组拆分为大小相等或近似相等的多个子数组。如果无法进行均等划分，则不会引发异常。 \u003e\u003e\u003e x = np.arange(8.0) \u003e\u003e\u003e np.array_split(x, 3) [array([0., 1., 2.]), array([3., 4., 5.]), array([6., 7.])] ","date":"2022-02-28","objectID":"/numpyguidebook/:1:5","tags":["numpy","ML"],"title":"NumpyGuidebook","uri":"/numpyguidebook/"},{"categories":["documentation"],"content":"拷贝和深拷贝 当计算和操作数组时，有时会将数据复制到新数组中，有时则不会 。 存在以下3种情况： 完全不复制 简单分配不会复制数组对象或其数据。 import numpy as np a=np.arange(4) # =的赋值方式会带有关联性 b=a c=a d=b #改变a的第一个值，b、c、d的第一个值也会同时改变。 浅拷贝 不同的数组对象可以共享相同的数据。view方法创建一个查看相同数据的新数组对象。 \u003e\u003e\u003e import numpy as np \u003e\u003e\u003e a=np.arange(12).reshape(3,4) \u003e\u003e\u003e a array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]]) \u003e\u003e\u003e c=a.view() \u003e\u003e\u003e c is a False \u003e\u003e\u003e c.base is a False \u003e\u003e\u003e c array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]]) \u003e\u003e\u003e c.shape = 2,6 \u003e\u003e\u003e c array([[ 0, 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10, 11]]) \u003e\u003e\u003e a.shape (3, 4) \u003e\u003e\u003e c[0,4] = 1234 \u003e\u003e\u003e a array([[ 0, 1, 2, 3], [1234, 5, 6, 7], [ 8, 9, 10, 11]]) \u003e\u003e\u003e c array([[ 0, 1, 2, 3, 1234, 5], [ 6, 7, 8, 9, 10, 11]]) 深拷贝copy() 该copy方法生成数组及其数据的完整副本。 import numpy as np a=np.arange(4) #copy()的赋值方式没有关联性 b=a.copy() print(b) a[3]=45 print('a:',a) #a: [11 1 2 45] print('b:',b) #b: [11 1 2 3] @all right save,ZhangGehang. ","date":"2022-02-28","objectID":"/numpyguidebook/:1:6","tags":["numpy","ML"],"title":"NumpyGuidebook","uri":"/numpyguidebook/"}]